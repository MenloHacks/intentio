/*
 * Copyright (c) 2018 by Filestack.
 * Some rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { resolveCdnUrl } from './../utils/index';
import { TransformSchema, getValidator, valuesToLowerCase } from './../../schema/';
import { FilestackError } from './../../FilestackError';
/**
 * @private
 */
var toSnakeCase = function (original) {
    var snakeCased = {};
    var keys = Object.keys(original);
    for (var i = 0; i < keys.length; i++) {
        var newKey = keys[i].split(/(?=[A-Z])/).join('_').toLowerCase();
        if (typeof original[keys[i]] === 'object' && !Array.isArray(original[keys[i]])) {
            snakeCased[newKey] = toSnakeCase(original[keys[i]]);
        }
        else {
            snakeCased[newKey] = original[keys[i]];
        }
    }
    return snakeCased;
};
/**
 * Align enum
 */
export var EAlignOptions;
(function (EAlignOptions) {
    EAlignOptions["left"] = "left";
    EAlignOptions["right"] = "right";
    EAlignOptions["center"] = "center";
    EAlignOptions["bottom"] = "bottom";
    EAlignOptions["top"] = "top";
})(EAlignOptions || (EAlignOptions = {}));
/**
 * Align enum with faces option
 */
export var EAlignFacesOptions;
(function (EAlignFacesOptions) {
    EAlignFacesOptions["left"] = "left";
    EAlignFacesOptions["right"] = "right";
    EAlignFacesOptions["center"] = "center";
    EAlignFacesOptions["bottom"] = "bottom";
    EAlignFacesOptions["top"] = "top";
    EAlignFacesOptions["faces"] = "faces";
})(EAlignFacesOptions || (EAlignFacesOptions = {}));
/**
 * Fit enum
 */
export var EFitOptions;
(function (EFitOptions) {
    EFitOptions["clip"] = "clip";
    EFitOptions["crop"] = "crop";
    EFitOptions["scale"] = "scale";
    EFitOptions["max"] = "max";
})(EFitOptions || (EFitOptions = {}));
/**
 * Blur enum
 */
export var EBlurMode;
(function (EBlurMode) {
    EBlurMode["linear"] = "linear";
    EBlurMode["gaussian"] = "gaussian";
})(EBlurMode || (EBlurMode = {}));
/**
 * Shapes enum
 */
export var EShapeType;
(function (EShapeType) {
    EShapeType["oval"] = "oval";
    EShapeType["rect"] = "rect";
})(EShapeType || (EShapeType = {}));
/**
 * Noise type enum
 */
export var ENoiseType;
(function (ENoiseType) {
    ENoiseType["none"] = "none";
    ENoiseType["low"] = "low";
    ENoiseType["medium"] = "medium";
    ENoiseType["high"] = "high";
})(ENoiseType || (ENoiseType = {}));
/**
 * Style type enum
 */
export var EStyleType;
(function (EStyleType) {
    EStyleType["artwork"] = "artwork";
    EStyleType["photo"] = "photo";
})(EStyleType || (EStyleType = {}));
/**
 * Color space enum
 */
export var EColorspaceType;
(function (EColorspaceType) {
    EColorspaceType["RGB"] = "RGB";
    EColorspaceType["CMYK"] = "CMYK";
    EColorspaceType["Input"] = "Input";
})(EColorspaceType || (EColorspaceType = {}));
/**
 * Crop faces options enum
 */
export var ECropfacesType;
(function (ECropfacesType) {
    ECropfacesType["thumb"] = "thumb";
    ECropfacesType["crop"] = "crop";
    ECropfacesType["fill"] = "fill";
})(ECropfacesType || (ECropfacesType = {}));
/**
 * Convert to format
 */
export var EVideoTypes;
(function (EVideoTypes) {
    EVideoTypes["h264"] = "h264";
    EVideoTypes["h264_hi"] = "h264.hi";
    EVideoTypes["webm"] = "webm";
    EVideoTypes["webm-hi"] = "webm.hi";
    EVideoTypes["ogg"] = "ogg";
    EVideoTypes["ogg-hi"] = "ogg.hi";
    EVideoTypes["hls-variant"] = "hls.variant";
    EVideoTypes["mp3"] = "mp3";
    EVideoTypes["oga"] = "oga";
    EVideoTypes["m4a"] = "m4a";
    EVideoTypes["aac"] = "aac";
    EVideoTypes["hls"] = "hls.variant.audio";
})(EVideoTypes || (EVideoTypes = {}));
export var EUrlscreenshotAgent;
(function (EUrlscreenshotAgent) {
    EUrlscreenshotAgent["desktop"] = "desktop";
    EUrlscreenshotAgent["mobile"] = "mobile";
})(EUrlscreenshotAgent || (EUrlscreenshotAgent = {}));
export var EUrlscreenshotMode;
(function (EUrlscreenshotMode) {
    EUrlscreenshotMode["all"] = "all";
    EUrlscreenshotMode["window"] = "window";
})(EUrlscreenshotMode || (EUrlscreenshotMode = {}));
export var EUrlscreenshotOrientation;
(function (EUrlscreenshotOrientation) {
    EUrlscreenshotOrientation["portrait"] = "portrait";
    EUrlscreenshotOrientation["landscape"] = "landscape";
})(EUrlscreenshotOrientation || (EUrlscreenshotOrientation = {}));
/**
 * Video storage location
 */
export var EVideoLocations;
(function (EVideoLocations) {
    EVideoLocations["s3"] = "s3";
    EVideoLocations["azure"] = "azure";
    EVideoLocations["gcs"] = "gcs";
    EVideoLocations["rackspace"] = "rackspace";
    EVideoLocations["dropbox"] = "dropbox";
})(EVideoLocations || (EVideoLocations = {}));
export var EVideoAccess;
(function (EVideoAccess) {
    EVideoAccess["private"] = "private";
    EVideoAccess["public"] = "public";
})(EVideoAccess || (EVideoAccess = {}));
export var EVideoAccessMode;
(function (EVideoAccessMode) {
    EVideoAccessMode["preserve"] = "preserve";
    EVideoAccessMode["constrain"] = "constrain";
    EVideoAccessMode["letterbox"] = "letterbox";
    EVideoAccessMode["pad"] = "pad";
    EVideoAccessMode["crop"] = "crop";
})(EVideoAccessMode || (EVideoAccessMode = {}));
/**
 * Converts nested arrays to string
 *
 * @private
 * @example [1,2, [2,3]] => "[1,2, [2,3]]"
 * @param arr - any array
 */
var arrayToString = function (arr) {
    var toReturn = arr.map(function (el) {
        if (Array.isArray(el)) {
            return arrayToString(el);
        }
        return escapeValue(el);
    });
    return "[" + toReturn + "]";
};
/**
 * Flatten transformation option to string
 *
 * @private
 * @example {resize:{width: 100,height: 200}} => resize=width:100,height:200
 * @param key - option key
 * @param values - option params
 */
var optionToString = function (key, values) {
    var optionsString = [];
    if (typeof values === 'undefined') {
        return key;
    }
    if (typeof values === 'object' && !Object.keys(values).length) {
        return key;
    }
    // if we just want to enable feature
    if (typeof values === 'boolean') {
        if (!values && key === 'cache') {
            return key + "=false";
        }
        if (!values) {
            return '';
        }
        return key;
    }
    Object.keys(values).forEach(function (i) {
        if (Array.isArray(values[i])) {
            optionsString.push(i + ":" + arrayToString(values[i]));
            return;
        }
        optionsString.push(i + ":" + escapeValue(values[i]));
    });
    return key + "=" + optionsString.join(',');
};
// move to utilÂ§s ?
var escapeValue = function (value) {
    if (typeof value !== 'string') {
        return value;
    }
    if (value.indexOf('http:') > -1
        || value.indexOf('https:') > -1
        || value.indexOf('src:') > -1
        || value.indexOf('/') > -1) {
        return "\"" + value + "\"";
    }
    return value;
};
/**
 * Creates filestack transform url.
 * Transform params can be provided in camelCase or snakeCase style
 *
 * @example
 * ```js
 * // camelCase
 * console.log(transform(session, {
 *    partialPixelate: {
 *      objects: [[10, 20, 200, 250], [275, 91, 500, 557]],
 *    },
 *  }, 'testfile'));
 * ```
 * result => https://cdn.filestackcontent.com/partial_pixelate=objects:[[10,20,200,250],[275,91,500,557]]/testfile
 *
 * ```js
 * // snakeCase
 * console.log(transform(session, {
 *    partial_pixelate: {
 *      objects: [[10, 20, 200, 250], [275, 91, 500, 557]],
 *    },
 *  }, 'testfile'));
 * ```
 * result => https://cdn.filestackcontent.com/partial_pixelate=objects:[[10,20,200,250],[275,91,500,557]]/testfile
 *
 * @private
 * @throws Error
 * @param options Transformation options
 */
export var transform = function (session, url, options) {
    if (options === void 0) { options = {}; }
    options = toSnakeCase(options);
    var validate = getValidator(TransformSchema);
    // use lower case only for validation
    if (!validate(valuesToLowerCase(JSON.parse(JSON.stringify(options))))) {
        throw new FilestackError('Validation error', validate.errors);
    }
    var transformsArray = [];
    if (session.policy && session.signature) {
        options.security = {
            policy: session.policy,
            signature: session.signature,
        };
    }
    Object.keys(options).forEach(function (key) {
        transformsArray.push(optionToString(key, options[key]));
    });
    // remove empty transform entries
    transformsArray = transformsArray.filter(function (val) {
        return val.length;
    });
    // See URL format: https://www.filestack.com/docs/image-transformations
    var baseURL = resolveCdnUrl(session, url);
    if (!transformsArray.length) {
        return baseURL + "/" + url;
    }
    var transformString = transformsArray.join('/');
    return baseURL + "/" + transformString + "/" + escapeValue(url);
};
